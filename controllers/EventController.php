<?php
// File: DonationController.php
require_once $_SERVER['DOCUMENT_ROOT'] . '/models/Events/DonationCampaign.php';
require_once $_SERVER['DOCUMENT_ROOT'] . '/models/Events/OutreachEvent.php';
require_once $_SERVER['DOCUMENT_ROOT'] . '/models/Events/FundraiserEvent.php';  
require_once $_SERVER['DOCUMENT_ROOT'] . '/models/Events/WorkshopEvent.php'; 
require_once $_SERVER['DOCUMENT_ROOT'] . '/models/Events/Attendee.php';
require_once $_SERVER['DOCUMENT_ROOT'] . '/models/Events/Activity.php';
require_once $_SERVER['DOCUMENT_ROOT'] . '/models/Events/Organization.php';
require_once $_SERVER['DOCUMENT_ROOT'] . '/services/database_service.php';

class EventController
{
    // Get all donation campaigns from the database
    public function getDonationCampaigns(): array
    {
        $db = Database::getInstance(); 
        return DonationCampaign::fetchAllCampaigns($db);
    }

    // Create a new donation campaign and save it to the database
    public function createDonationCampaign(array $data): array
    {
        // Create a new donation campaign instance
        $campaign = new DonationCampaign(
            0, // ID will be auto-generated by the database
            $data['name'],
            $data['description'],
            new DateTime($data['start_date']),
            new DateTime($data['end_date']),
            $data['target_amount']
        );

        // Save the donation campaign to the database
        $campaign->save();

        return ['success' => true, 'message' => "Donation campaign '{$campaign->getTitle()}' created successfully!"];
    }

    // Create a new event under a specific campaign
    public function createEvent(array $data): array
    {
        // Get the donation campaign by ID
        $campaign = DonationCampaign::loadById($data['campaign_id']);

        if (!$campaign) {
            return ['success' => false, 'message' => "Campaign not found!"];
        }

        // Determine event type and create event accordingly
        $event = null;
        $eventID = 0; // Will be auto-generated
        $dateTime = new DateTime($data['date_time']);
        
        switch ($data['event_type']) {
            case 'outreach':
                $event = new OutreachEvent(
                    $eventID, 
                    $data['title'],
                    $data['max_attendees'],
                    $data['address_id'],
                    $dateTime
                );
                break;
            case 'fundraiser':
                $event = new FundraiserEvent(
                    $eventID,  // Event ID
                    $data['title'],  // Event title
                    $data['address_id'],  // Address ID
                    $dateTime,  // Event date and time
                    $data['goal_amount'],  // Goal amount for fundraising
                    $data['raised_amount'] ?? 0.0  // Raised amount, default to 0.0 if not provided
                );
                break;
            case 'workshop':
                // Assuming $data['instructor_id'] contains the ID of the instructor (person_id)
                // Create the Volunteer object using the instructor's ID
                $instructor = new Volunteer($data['instructor_id']);  // This will use the person_id constructor and load volunteer details
                
                // Create a new WorkshopEvent with the necessary parameters
                $event = new WorkshopEvent(
                    $eventID,           // Event ID
                    $data['title'],     // Event title
                    $data['max_attendees'], // Max attendees
                    $dateTime,          // DateTime object for the event date and time
                    $data['address_id'],    // Address ID (not Address object)
                    [$instructor]       // Array of workshops (assuming just the instructor is passed here for simplicity)
                );
                break;
            default:
                return ['success' => false, 'message' => "Invalid event type!"];
        }

        // Link event to the campaign and save
        $campaign->addEvent($event);
        $event->save();

        return ['success' => true, 'message' => "Event '{$event->getTitle()}' created successfully in campaign '{$campaign->getTitle()}'!"];
    }

    // Register an attendee for a specific event
    public function registerAttendee(array $data): array
    {
        $attendee = new Attendee(
            0, // ID will be auto-generated by the database
            $data['name'], // name
            $data['date_of_birth'], // date of birth
            $data['national_id'], // national ID
            $data['address_id'], // address ID
            $data['phone_number'] // phone number
        );
        
        // Now, save the attendee (e.g., using save method if it exists)
        $attendee->save();

        return ['success' => true, 'message' => "Attendee '{$attendee->getName()}' registered successfully!"];
    }

    // Add activity to an outreach event
    public function addActivityToEvent(int $eventId, array $data): array
    {
        $event = OutreachEvent::loadById($eventId);
        if ($event) {
            $event->addActivity($data['activity']); // Using addActivity method from OutreachEvent class
            $event->save(); // Save after adding the activity
            return ['success' => true, 'message' => "Activity '{$data['activity']}' added to event '{$event->getTitle()}' successfully!"];
        }
        return ['success' => false, 'message' => "Event not found!"];
    }

    // Add organization to an outreach event
    public function addOrganizationToEvent(int $eventId, array $data): array
    {
        $event = OutreachEvent::loadById($eventId);
        if ($event) {
            $event->addOrganization($data['organization']); // Using addOrganization method from OutreachEvent class
            $event->save(); // Save after adding the organization
            return ['success' => true, 'message' => "Organization '{$data['organization']}' added to event '{$event->getTitle()}' successfully!"];
        }
        return ['success' => false, 'message' => "Event not found!"];
    }

    // Record raised amount for a fundraiser event
    public function contributeToFundraiser(int $eventId, float $amount): array
    {
        $event = FundraiserEvent::loadById($eventId);
        if ($event) {
            $event->updateRaisedAmount($amount); // Using addRaisedAmount method from FundraiserEvent class
            $event->save(); // Save after updating the raised amount
            return ['success' => true, 'message' => "Contribution of $amount successfully recorded for event '{$event->getTitle()}'!"];
        }
        return ['success' => false, 'message' => "Event not found!"];
    }

    // Add a workshop to a workshop event
    public function addWorkshopToEvent(int $eventId, array $data): array
    {
        $event = WorkshopEvent::loadById($eventId);
        if ($event) {
            $event->addWorkshop($data['description'], $data['volunteer']); // Using addWorkshop method from WorkshopEvent class
            $event->save(); // Save after adding the workshop
            return ['success' => true, 'message' => "Workshop added to event '{$event->getTitle()}' successfully!"];
        }
        return ['success' => false, 'message' => "Event not found!"];
    }
}
?>
